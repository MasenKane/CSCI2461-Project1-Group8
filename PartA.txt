Group Number: 8
Team Members: Masen Kane, Jaesok Choi, Jacob Cannizzaro

Question 1:
  The first thing that this program does is set y equal to the 2's complement of x. Then z is set equal to the complement of y or x. 
  Then it is bit shifted down 31 bits. This will just make the entire number 1's or 0's depending on the sign of the number. The only
  way it will return 1 is if the original input is 0. For any other input it will return 0.
  
Question 2:
  The first thing that the program does is set mask equal to the number bit shifted 31 bits (which will just be the sign bit). Next, it 
  is bitwise OR'ed with the original number and is put into y. This will be all 1's if the number was negative or just x if the number
  was positive. Then z is set to the complement of mask + 1, which will be 1 if the munber was negative or 0 if it was positive. In the 
  end, if x is greater than or equal to 0, it will return x, if x is less than 0, if will return the 2's complement (the positive 
  number).

Question 3:
  First y is set to not x, which will be 1 if it is 0, and 0 for all other values. Then z is set to x bit shifted 31 bits (which will 
  just be the sign bit 32 times) Then z is set to z OR y, which will be 1 if x is negative or 0. Then this is NOT'ed and returns 1 if x 
  is greater than 0, and returns 0 if x is less than or equal to 0.

Question 4:
  First x is set to NOT(NOT(n)) which will be 0 if n is 0 or 1 in all other cases. It is then bit shifted to the left 31 bits and then 
  to the right 31 bits. This will be all 0's if NOT(NOT(n)) was 0, or all 1's in all other cases. Then y is bit shifted 31 bits to the 
  left, and then shited right (n - 1) times which will make the rightmost n bits of the number 1's (which is the 2's complement 
  representation of the number 2(32 - n). In the end, this will return 0 if n equals 0, returns -(2^(32 - n)) if n is greater than 0 and 
  less than 32.

Question 5:
  All that this program does is bit shift the number 31 bits to the left and then 31 bits to the left. This will take the 1st bit (the 
  ones bits) and returns all 1's if the bit was a 1 or all 0's if the number was a 0. In the end this just returns 0 if even, returns -1 
  if odd.

Question 6:
  Function ques6() takes no parameters. It initializes an integer named byte with the hex value 0x55. This translates to the 8 bit 
  number 00000000000000000000000001010101 in binary represented as a 32 bit integer. Then the integer word is initialized with the value 
  of byte OR’d with byte bit-shifted 8 bits to the left. When byte is bit-shifted 8 bits to the left, it holds the value 
  00000000000000000101010100000000. When the original value of byte is OR’d with this new value of byte, word is given the value 
  00000000000000000101010101010101. This is because when you or those two numbers, every 1 in either number will be there in the result. 
  The return statement returns the current value of word with the value of word bit shifted 16 bits to the left. When word is bit-
  shifted 16 bits to the left, it holds the value 01010101010101010000000000000000. When that is OR’d with 
  00000000000000000101010101010101, the function returns 01010101010101010101010101010101.

Question 7:
  Function ques7() takes an integer x as a parameter. All operation is done in the return statement. The integer x is bitwise NOTed, 
  meaning every bit was flipped, and then one is added to that. This is the same process as taking the two’s complement of a number. 
  This value is then anded with the original value of x. I will refer to the 2’s complement of x as x’ for clarity. Because every bit in 
  x is flipped before one is added, no bits in x and x’ will be the same if they are more significant bits than the rightmost bit with a 
  1 in it in x. This is because, when 1 is added to the flipped integer, the carry of the addition will carry a one to the the same bit 
  as the right most bit with a 1 in it in x. This happens because if there is a a 1 in the rightmost bit of x, there will be a 0 when 
  the bit is flipped, when you add 1 to the 0 in that bit, the sum will be a 1 because the rightmost bit of x was right there. If the 
  last few bits of x are 0, then the last few negated bits would be 1. When 1 is added to these 1s, the addition will keep carrying 
  until there is a 0 in x’, signifying there was a 1 in x. What this gives us, is a return value returning the highest power of 2 that 
  the input is divisible by (the powers being 1,2,4,8...etc.). For example, if the input is integer 11000 (decimal value 24), it would 
  be negated to give 00111. When 1 is added to that you get 01000. When that is anded with 11000, the return value is 01000 (decimal 
  value 8). This means 8 is the highest power of 2 that 24 is divisible by. This makes sense, 24 is divisible by 1,2,4,8, but not 16.

Question 8:
  Function ques8() takes an integer x as a parameter. Integer y is then initialized with the value of x bit-shifted to the right 31 
  places. This gives y the value of x’s sign bit in y’s right most bit. If x was a negative number, y will hold the value 
  11111111111111111111111111111111. If x was positive, y will be 00000000000000000000000000000000. Integer z is then set to the value of 
  !!x. !x will give 0 if x is anything but 0, and will give 1 if x is 0. This means !!x will give 1 if x is anything but 0, and will 
  give 0 if x is 0. Therefore, if x is 0, z will be 00000000000000000000000000000000. If x is anything but 0, z will be 
  00000000000000000000000000000001 (in decimal this is just 1). If x is a negative number, y will hold all 1’s, and z will hold the 
  value 1, the return statement returns y OR z, so this will just return all 11111111111111111111111111111111. Since the first bit is a 
  1, you take the 2’s complement of this number to figure out it’s decimal equivalent. This will equal -1 in decimal. This means the 
  function returns a -1 if x is less than 0. If x is 0, y will hold the value of 0, and z will also be 0. This will then return y OR z 
  which will be equal to 0. This function returns 0 if x is 0. If x is greater than 0, y will be 0, and z will be 1. When you OR y and 
  z, the function returns a 1. If x is greater than 0, the function returns a 1.

Question 9:
  First do n % 4. If shift = 0, substitute the rightmost 8 bits of x with the rightmost 8 bits of c and 
  return that value. If shift = 1, substitute the ninth through the sixteenth bits from the right of x with the rightmost 8 bits of c 
  and return that value. If shift = 2, substitute the seventeenth through the twenty-fourth bits from the right of x with the rightmost 
  8 bits of c and return that value. If shift = 3, substitute the twenty-fifth through the final bits from the right of x with the 
  rightmost 8 bits of c and return that value. 

Question 10:
  Function ques10() takes an integer x as a parameter. Integer y is then initialized to !!x. !x will give 0 if x is anything but 0, and 
  will give 1 if x is 0. This means !!x will give 1 if x is anything but 0, and will give 0 if x is 0. If x is 0, y will be 
  00000000000000000000000000000000. If x is anything but 0, y will be 00000000000000000000000000000001. Integer z is then initialized 
  with the value of !(x+x). This is NOTing the value of x added to x. If x is anything but 0, the sum of x+x will also be anything but 
  0. NOTing anything but 0 gives a 0. When x is 0, the sum will be 0 and z will be 1. When x is anything but 0, z will be 0. This means, 
  when x is anything but 0, y will be 1, and z will be 0. When x is 0, y will be 0 and z will be 1. The function returns y AND z. The 
  return value could only ever be 1 if z and y were both 1, but that will never be the case, so function ques10 will always return 0.

Question 11:
  We will use the truth table explain this function more clearly. 

  If int 'x' is shifted to the right by 31 bits, it returns its sign bit, so int 'a' is the sign bit of 'x'. 
  In the same way, int 'b' is the sign bit of 'y' because 'y' is also shifted to the right by 31 bits. 

| a | b | !a | (!a&b) | a^b | !(a^b) | (y+~x) | !(a^b) & (y+~x) | (!a & b) | (!(a^b) & (y+~x)) | !((!a & b) | (!(a^b) & (y+~x))) |
|---|---|----|--------|-----|--------|--------|-----------------|------------------------------|---------------------------------|
| 0 | 0 | 1  | 0      | 0   | 1      | 1      | 1               | 1                            | 0                               |
| 0 | 1 | 1  | 1      | 1   | 0      | 0      | 0               | 1                            | 0                               |
| 1 | 0 | 0  | 0      | 1   | 0      | 0      | 0               | 0                            | 1                               |
| 1 | 1 | 0  | 0      | 0   | 1      | 1      | 1               | 1                            | 0                               |

  The only time it returns 1 at the end is when a = 1 & b = 0.  
  
  Thus, this function returns 1 when x is negative and y is positive. Returns 0 in all other cases.

Question 12:
  Int a is the 2's complement of m. Therefore, 'a' = x - m.
  Int b is the 2's complement of x. Therefore, 'b' = n - x. 

  The boolean expression (a|b >> 31) returns the sign bit of a|b. 
  To return 1, the sign bit of 'a|b' must be equal to 0. Therefore, a & b both must be 0, which suggest a and b are both positive.   
  
  In order for 'a' and 'b' to be both positive, x - m > 0 & n - x > 0. If we simplify, x > m & n > x. 
  
  Thus, this function returns 1 if x is greater than m and n is greater than x. Otherwise it returns 0.

Question 13:
  Mask 2 = 0x33 + (0x33 << 8) = 0011 0011 + 0011 0011 0000 0000 = 0011 0011 0011 0011
  In the next line, we add Mask 2 by Mask 2 shifted to the left by 16. 
  This returns, 
  Mask 2 = 0011 0011 0011 0011 0000 0000 0000 0000 + 0011 0011 0011 0011 = 0011 0011 0011 0011 0011 0011 0011 0011 
  
  Mask 1 = Mask 2 ^ (Mask 2  << 1)
  We add Mask 2 by Mask 2 shifted to the left by 1 to get Mask 1. 
  Thus, Mask 1 = 0101 0101 0101 0101 0101 0101 0101 0101
  
  In the same way, 
  Mask 4 = 0000 1111 0000 1111 0000 1111 0000 1111
  Mask 8 = 0000 0000 1111 1111 0000 0000 1111 1111 
  Mask 16 = 0000 0000 0000 0000 1111 1111 1111 1111
  
  The below commands all do the same thing, comparing 'x' with mask 1,2,4,8, and 16 and return 1s present in 'x'. 
   x = (x & mask1) + ((x >> 1) & mask1);
   x = (x & mask2) + ((x >> 2) & mask2);
   x = (x & mask4) + ((x >> 4) & mask4);
   x = (x & mask8) + ((x >> 8) & mask8);
   x = (x & mask16) + ((x >> 16) & mask16);
  
  Returns the number of 1s present in the binary representation of the number.

Question 14:
  int result starts with the value of 0. Notice the ^ gate insde the for-loop.
  
  The for-loop compares 'x' with 0001 whenever 'x' is shifted to the right by 'i'. 
  If (x>>i) & 0x1 returns 1, it XORs with the result, so it returns 1. 
  When 'result' equals 1 and (x>>i) & 0x1 equals 1, the 'result' becomes 0 again. 
  This tells us that if 'x' has an odd number of 1s present, it returns 1, while the even number of 1s present makes 'result' back to 0. 
  
  Thus, this function returns 1 if there are an odd number of true bits. Returns 0 if there are an even number of true bits.

Question 15:
  Masks everything but the leftmost n bits of the number x.
